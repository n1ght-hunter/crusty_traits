/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct Inner_CVecVTable {
    CVecVTable *vtable;
    uint8_t *ptr;
} Inner_CVecVTable;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CVecVTable CRefMut_CVecVTable;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CVecVTable CRef_CVecVTable;

typedef struct Inner_CSliceVTable {
    CSliceVTable *vtable;
    uint8_t *ptr;
} Inner_CSliceVTable;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CSliceVTable CRef_CSliceVTable;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CSliceVTable CRefMut_CSliceVTable;

/**
 *A repr C vtable for the trait CSlice
 */
typedef struct CSliceVTable_i32 {
    /**
     * Returns a pointer to the first element of the slice.
     */
    const int32_t *(*as_ptr)(CRef_CSliceVTable);
    /**
     * Returns the length of the slice.
     */
    uintptr_t (*len)(CRef_CSliceVTable);
    /**
     *A function pointer to the drop function for the trait
     */
    void (*drop)(CRefMut_CSliceVTable);
} CSliceVTable_i32;

/**
 *A repr C vtable for the trait CVec
 */
typedef struct CVecVTable_i32 {
    /**
     * Adds an element to the end of the vector.
     */
    void (*push)(CRefMut_CVecVTable, int32_t);
    /**
     * Extends the vector's capacity by the given amount.
     */
    void (*extend)(CRefMut_CVecVTable, uintptr_t);
    /**
     * Returns the capacity of the vector.
     */
    uintptr_t (*capacity)(CRef_CVecVTable);
    const struct CSliceVTable_i32 *field_c_slice;
    /**
     *A function pointer to the drop function for the trait
     */
    void (*drop)(CRefMut_CVecVTable);
} CVecVTable_i32;

typedef struct Inner_CVecVTable_i32 {
    struct CVecVTable_i32 *vtable;
    uint8_t *ptr;
} Inner_CVecVTable_i32;

/**
 * A trait that represents a buffer that can be converted to a C-compatible slice.
 */
typedef struct Inner_CVecVTable_i32 CRepr_CVecVTable_i32;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_SharedLibTraitVTable CRef_SharedLibTraitVTable;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_SharedLibTraitVTable CRefMut_SharedLibTraitVTable;

/**
 *A repr C vtable for the trait SharedLibTrait
 */
typedef struct SharedLibTraitVTable {
    /**
     * Get a message from the implementation.
     */
    int32_t (*get_message)(CRef_SharedLibTraitVTable);
    /**
     *A function pointer to the drop function for the trait
     */
    void (*drop)(CRefMut_SharedLibTraitVTable);
} SharedLibTraitVTable;

typedef struct Inner_SharedLibTraitVTable {
    struct SharedLibTraitVTable *vtable;
    uint8_t *ptr;
} Inner_SharedLibTraitVTable;

/**
 * A trait that represents a buffer that can be converted to a C-compatible slice.
 */
typedef struct Inner_SharedLibTraitVTable CRepr_SharedLibTraitVTable;

/**
 * print "Hello from the shared library!"
 */
void hello_world(void);

/**
 * add two numbers and return the result
 */
intptr_t add(intptr_t a, intptr_t b);

/**
 * multiply two numbers and return the result
 */
intptr_t multiply(intptr_t a, intptr_t b);

/**
 * Create a new C-compatible vector of i32 and return it.
 */
CRepr_CVecVTable_i32 create_vector(void);

/**
 * Create a new implementation of the SharedLibTrait and return it as a CRepr.
 */
CRepr_SharedLibTraitVTable create_shared_lib_trait(void);
