/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CVecVTable_i32 CRefMut_CVecVTable_i32;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CVecVTable_i32 CRef_CVecVTable_i32;

typedef struct Inner_CSliceVTable_i32 {
    struct CSliceVTable_i32 *vtable;
    uint8_t *ptr;
} Inner_CSliceVTable_i32;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CSliceVTable_i32 CRef_CSliceVTable_i32;

/**
 * A reference to a C-compatible object.
 */
typedef struct Inner_CSliceVTable_i32 CRefMut_CSliceVTable_i32;

/**
 *A repr C vtable for the trait CSlice
 */
typedef struct CSliceVTable_i32 {
    /**
     * Returns a pointer to the first element of the slice.
     */
    const int32_t *(*as_ptr)(CRef_CSliceVTable_i32);
    /**
     * Returns the length of the slice.
     */
    uintptr_t (*len)(CRef_CSliceVTable_i32);
    /**
     *A function pointer to the drop function for the trait
     */
    void (*drop)(CRefMut_CSliceVTable_i32);
} CSliceVTable_i32;

/**
 *A repr C vtable for the trait CVec
 */
typedef struct CVecVTable_i32 {
    /**
     * Adds an element to the end of the vector.
     */
    void (*push)(CRefMut_CVecVTable_i32, int32_t);
    /**
     * Extends the vector's capacity by the given amount.
     */
    void (*extend)(CRefMut_CVecVTable_i32, uintptr_t);
    /**
     * Returns the capacity of the vector.
     */
    uintptr_t (*capacity)(CRef_CVecVTable_i32);
    const struct CSliceVTable_i32 *field_c_slice;
    /**
     *A function pointer to the drop function for the trait
     */
    void (*drop)(CRefMut_CVecVTable_i32);
} CVecVTable_i32;

typedef struct Inner_CVecVTable_i32 {
    struct CVecVTable_i32 *vtable;
    uint8_t *ptr;
} Inner_CVecVTable_i32;

/**
 * A trait that represents a buffer that can be converted to a C-compatible slice.
 */
typedef struct Inner_CVecVTable_i32 CRepr_CVecVTable_i32;

/**
 * print "Hello from the shared library!"
 */
void hello_world(void);

/**
 * add two numbers and return the result
 */
intptr_t add(intptr_t a, intptr_t b);

/**
 * multiply two numbers and return the result
 */
intptr_t multiply(intptr_t a, intptr_t b);

/**
 * Create a new C-compatible vector of i32 and return it.
 */
CRepr_CVecVTable_i32 create_vector(void);
